// [main.c]
// this template is provided for the 2D shooter game.

#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_primitives.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>
#include <math.h>

// If defined, logs will be shown on console and written to file.
// If commented out, logs will not be shown nor be saved.
#define LOG_ENABLED

/* Constants. */

// Frame rate (frame per second)
const int FPS = 60;
// Display (screen) width.
const int SCREEN_W = 800;
// Display (screen) height.
const int SCREEN_H = 600;
// At most 4 audios can be played at a time.
const int RESERVE_SAMPLES = 6;
// Same as:
// const int SCENE_MENU = 1;
// const int SCENE_STAGE_1 = 2;
enum {
	SCENE_MENU = 1,
	SCENE_STAGE_1 = 2,
	SCENE_STAGE_2 = 3,
	SCENE_STAGE_BOSS = 4,
	SCENE_END_VIOLENT = 5,
	SCENE_END_DIE = 6,
	// [HACKATHON 3-7]
	// TODO: Declare a new scene id.
	SCENE_MARKET = -1,
	SCENE_EDITOR = -2
};

/* Input states */

// The active scene id.
int active_scene;
// Keyboard state, whether the key is down or not.
bool key_state[ALLEGRO_KEY_MAX];
// Mouse state, whether the key is down or not.
// 1 is for left, 2 is for right, 3 is for middle.
bool *mouse_state;
// Mouse position.
int mouse_x, mouse_y;
// TODO: More variables to store input states such as joysticks, ...
int level_of_violence;
int skill_point;
int bullet_speed;
int max_health;
int bullet_harm;
bool hover[4];
int plane_color;
int editor_mode;
/* Variables for allegro basic routines. */

ALLEGRO_DISPLAY* game_display;
ALLEGRO_EVENT_QUEUE* game_event_queue;
ALLEGRO_TIMER* game_update_timer;

/* Shared resources*/

ALLEGRO_FONT* font_rpg_1_64;
ALLEGRO_FONT* font_rpg_1_90;
ALLEGRO_FONT* font_pirulen_24;
// TODO: More shared resources or data that needed to be accessed
// across different scenes.

/* Menu Scene resources*/
ALLEGRO_BITMAP* main_img_background;
ALLEGRO_BITMAP* die_img_background;
ALLEGRO_BITMAP* win_img_background;
// [HACKATHON 3-1]
// TODO: Declare 2 variables for storing settings images.
// Uncomment and fill in the code below.
ALLEGRO_BITMAP* img_market;
ALLEGRO_BITMAP* img_market2;
ALLEGRO_SAMPLE* main_bgm;
ALLEGRO_SAMPLE_ID main_bgm_id;
ALLEGRO_SAMPLE* die_bgm;
ALLEGRO_SAMPLE* win_bgm;
ALLEGRO_SAMPLE_ID die_bgm_id;
ALLEGRO_SAMPLE* bm_bgm;
ALLEGRO_SAMPLE_ID bm_bgm_id;

/* Start Scene resources*/
ALLEGRO_BITMAP* start_img_background;
ALLEGRO_BITMAP* start_img_plane;
ALLEGRO_BITMAP* start_img_plane2;
ALLEGRO_BITMAP* start_img_enemy;
ALLEGRO_SAMPLE* start_bgm;
ALLEGRO_SAMPLE_ID start_bgm_id;
ALLEGRO_BITMAP* bm_img_background;
ALLEGRO_SAMPLE* bomb_sound;
ALLEGRO_SAMPLE* explo_sound;
ALLEGRO_SAMPLE* explo2_sound;
ALLEGRO_SAMPLE* destru_sound;
ALLEGRO_SAMPLE* hover_sound;
ALLEGRO_SAMPLE* click_sound;
ALLEGRO_SAMPLE* recover_sound;
ALLEGRO_SAMPLE_ID bomb_sound_id;
ALLEGRO_SAMPLE_ID explo_sound_id;
ALLEGRO_SAMPLE_ID explo2_sound_id;
ALLEGRO_SAMPLE_ID destru_sound_id;
ALLEGRO_SAMPLE_ID hover_sound_id;
ALLEGRO_SAMPLE_ID click_sound_id;
ALLEGRO_SAMPLE_ID recover_sound_id;
// [HACKATHON 2-1]
// TODO: Declare a variable to store your bullet's image.
// Uncomment and fill in the code below.
ALLEGRO_BITMAP* img_bullet;
ALLEGRO_BITMAP* img_ene_bullet;

typedef struct {
	// The center coordinate of the image.
	float x, y;
	// The width and height of the object.
	float w, h;
	// The velocity in x, y axes.
	float vx, vy;
	// Should we draw this object on the screen.
	bool hidden;
	// The pointer to the object’s image.
	float health, health_max;
	ALLEGRO_BITMAP* img;
} MovableObject;
void draw_movable_object(MovableObject obj);
void draw_movable_obj_health(MovableObject obj, int pos);
#define MAX_ENEMY 30
#define MAX_BULLET 50
MovableObject plane;
MovableObject enemies[MAX_ENEMY];
int enemies_map[MAX_ENEMY];
// [HACKATHON 2-3]
// TODO: Declare an array to store bullets with size of max bullet count.
// Uncomment and fill in the code below.
MovableObject bullets[MAX_BULLET];
MovableObject ene_bullets[MAX_BULLET];
// [HACKATHON 2-4]
// TODO: Set up bullet shooting cool-down variables.
// 1) Declare your shooting cool-down time as constant. (0.2f will be nice)
// 2) Declare your last shoot timestamp.
// Uncomment and fill in the code below.
const float MAX_SHOOT_COOLDOWN = 0.4f;
float shoot_cooldown;
float discharge_cooldown;
double die_timestamp;
double last_shoot_timestamp;
double last_discharge_timestamp;
double last_ene_shoot_timestamp;
double game_start_timestamp;

#define button_light al_map_rgb(244, 164, 96)
#define button_dark al_map_rgb(176, 23, 31)
/* Declare function prototypes. */

// Initialize allegro5 library
void allegro5_init(void);
// Initialize variables and resources.
// Allows the game to perform any initialization it needs before
// starting to run.
void game_init(void);
// Process events inside the event queue using an infinity loop.
void game_start_event_loop(void);
// Run game logic such as updating the world, checking for collision,
// switching scenes and so on.
// This is called when the game should update its logic.
void game_update(void);
// Draw to display.
// This is called when the game should draw itself.
void game_draw(void);
// Release resources.
// Free the pointers we allocated.
void game_destroy(void);
// Function to change from one scene to another.
void game_change_scene(int next_scene);
// Load resized bitmap and check if failed.
ALLEGRO_BITMAP *load_bitmap_resized(const char *filename, int w, int h);
ALLEGRO_BITMAP *die_bitmap_resized(const char *filename, int w, int h);
ALLEGRO_BITMAP *win_bitmap_resized(const char *filename, int w, int h);
// [HACKATHON 3-2]
// TODO: Declare a function.
// Determines whether the point (px, py) is in rect (x, y, w, h).
// Uncomment the code below.
bool pnt_in_rect(int px, int py, int x, int y, int w, int h);

/* Event callbacks. */
void on_key_down(int keycode);
void on_mouse_down(int btn, int x, int y);

/* Declare function prototypes for debugging. */

/// Display error message and exit the program, used like 'printf'.
/// Write formatted output to stdout and file from the format string.
/// If the program crashes unexpectedly, you can inspect "log.txt" for
/// further information.
void game_abort(const char* format, ...);
/// Log events for later debugging, used like 'printf'.
/// Write formatted output to stdout and file from the format string.
/// You can inspect "log.txt" for logs in the last run.
void game_log(const char* format, ...);
/// Log using va_list.
void game_vlog(const char* format, va_list arg);
void game_save_data(void);

int main(int argc, char** argv) {
	/// Set random seed for better random outcome.
	srand(time(NULL));
	allegro5_init();
	game_log("Allegro5 initialized");
	game_log("Game begin");
	/// Initialize game variables.
	game_init();
	game_log("Game initialized");
	/// Draw the first frame.
	game_draw();
	game_log("Game start event loop");
	/// This call blocks until the game is finished.
	game_start_event_loop();
	game_log("Game end");
	game_destroy();
	return 0;
}

void allegro5_init(void) {
	if (!al_init())
		game_abort("failed to initialize allegro");

	// Initialize add-ons.
	if (!al_init_primitives_addon())
		game_abort("failed to initialize primitives add-on");
	if (!al_init_font_addon())
		game_abort("failed to initialize font add-on");
	if (!al_init_ttf_addon())
		game_abort("failed to initialize ttf add-on");
	if (!al_init_image_addon())
		game_abort("failed to initialize image add-on");
	if (!al_install_audio())
		game_abort("failed to initialize audio add-on");
	if (!al_init_acodec_addon())
		game_abort("failed to initialize audio codec add-on");
	if (!al_reserve_samples(RESERVE_SAMPLES))
		game_abort("failed to reserve samples");
	if (!al_install_keyboard())
		game_abort("failed to install keyboard");
	if (!al_install_mouse())
		game_abort("failed to install mouse");
	// TODO: Initialize other addons such as video, ...

	// Setup game display.
	game_display = al_create_display(SCREEN_W, SCREEN_H);
	if (!game_display)
		game_abort("failed to create display");
	al_set_window_title(game_display, "I2P(I)_2019 Final Project <108062303>");

	// Setup update timer.
	game_update_timer = al_create_timer(1.0f / FPS);
	if (!game_update_timer)
		game_abort("failed to create timer");

	// Setup event queue.
	game_event_queue = al_create_event_queue();
	if (!game_event_queue)
		game_abort("failed to create event queue");

	// Malloc mouse buttons state according to button counts.
	const unsigned m_buttons = al_get_mouse_num_buttons();
	game_log("There are total %u supported mouse buttons", m_buttons);
	// mouse_state[0] will not be used.
	mouse_state = malloc((m_buttons + 1) * sizeof(bool));
	memset(mouse_state, false, (m_buttons + 1) * sizeof(bool));

	// Register display, timer, keyboard, mouse events to the event queue.
	al_register_event_source(game_event_queue, al_get_display_event_source(game_display));
	al_register_event_source(game_event_queue, al_get_timer_event_source(game_update_timer));
	al_register_event_source(game_event_queue, al_get_keyboard_event_source());
	al_register_event_source(game_event_queue, al_get_mouse_event_source());
	// TODO: Register other event sources such as timer, video, ...

	// Start the timer to update and draw the game.
	al_start_timer(game_update_timer);
}

void game_init(void) {
	/* Shared resources*/
	font_rpg_1_64 = al_load_font("粗體.ttf", 75, 0);
	if (!font_rpg_1_64)
		game_abort("failed to load font: 粗體.ttf with size 70");

    font_rpg_1_90 = al_load_font("粗體.ttf", 100, 0);
	if (!font_rpg_1_90)
		game_abort("failed to load font: 粗體.ttf with size 100");

	font_pirulen_24 = al_load_font("可愛字.ttf", 65, 0);
	if (!font_pirulen_24)
		game_abort("failed to load font: 可愛字.ttf with size 65");

	/* Menu Scene resources*/
	main_img_background = load_bitmap_resized("18禁.png", SCREEN_W, SCREEN_H);
	die_img_background = load_bitmap_resized("失敗.jpeg", SCREEN_W, SCREEN_H);
    win_img_background = load_bitmap_resized("草莓.png", SCREEN_W, SCREEN_H);
	main_bgm = al_load_sample("god.wav");
	if (!main_bgm)
		game_abort("failed to load audio: god.wav");

    win_bgm = al_load_sample("人死心還在.wav");
	if (!win_bgm)
		game_abort("failed to load audio: 人死心還在.wav");
    die_bgm = al_load_sample("醜八怪.wav");
	if (!die_bgm)
		game_abort("failed to load audio: 醜八怪.wav");
	// [HACKATHON 3-4]
	// TODO: Load settings images.
	// Don't forget to check their return values.
	// Uncomment and fill in the code below.
	img_market2 = load_bitmap_resized("右選舉章.png", 38, 38);
	if (!img_market2)
		game_abort("failed to load image: 右選舉章.png");
	img_market = load_bitmap_resized("左選舉章.png", 38, 38);
	if (!img_market)
		game_abort("failed to load image: 左選舉章.png");

	/* Start Scene resources*/
	start_img_background = load_bitmap_resized("候選人.jpg", SCREEN_W, SCREEN_H);
	bm_img_background = load_bitmap_resized("bm-bg.jpg", SCREEN_W, SCREEN_H);

	start_img_plane = load_bitmap_resized("韓國瑜2.png", 45, 53);
	if (!start_img_plane)
		game_abort("failed to load image: 韓國瑜.png");
    start_img_plane2 = load_bitmap_resized("宋楚瑜1.png", 45, 53);
	if (!start_img_plane2)
		game_abort("failed to load image: 宋楚瑜1.png");

	start_img_enemy = load_bitmap_resized("蔡英文1.png", 55, 55);
	if (!start_img_enemy)
		game_abort("failed to load image: 蔡英文1.png");

	start_bgm = al_load_sample("bm_bgm.ogg");
	if (!start_bgm)
		game_abort("failed to load audio: bm_bgm.ogg");
    bm_bgm = al_load_sample("震撼樂.wav");
	if (!start_bgm)
		game_abort("failed to load audio: 震撼樂.wav");
    bomb_sound = al_load_sample("驚嚇.wav");
    if (!bomb_sound)
        game_abort("failed to load audio: 驚嚇.wav");
    explo_sound = al_load_sample("放屁1.wav");
    if (!explo_sound)
        game_abort("failed to load audio: 放屁1.wav");
    explo2_sound = al_load_sample("打嗝.wav");
    if (!explo2_sound)
        game_abort("failed to load audio: 打嗝.wav");
    destru_sound = al_load_sample("女生大笑.wav");
    if (!destru_sound)
        game_abort("failed to load audio: 女生大笑.wav");
    hover_sound = al_load_sample("select09.ogg");
    if (!hover_sound)
        game_abort("failed to load audio: select09.ogg");
    click_sound = al_load_sample("select07.ogg");
    if (!click_sound)
        game_abort("failed to load audio: select07.ogg");
    recover_sound = al_load_sample("poka02.ogg");
    if (!recover_sound)
        game_abort("failed to load audio: poka02.ogg");
	// [HACKATHON 2-5-1]
	// TODO: Initialize bullets.
	// 1) Search for a bullet image online and put it in your project.
	//    You can use the image we provided.
	// 2) Load it in by 'al_load_bitmap' or 'load_bitmap_resized'.
	// 3) If you use 'al_load_bitmap', don't forget to check its return value.
	// Uncomment and fill in the code below.
	img_bullet = load_bitmap_resized("1A.png", 24, 48);
	if (!img_bullet)
		game_abort("failed to load image: 1A.png");
    img_ene_bullet = load_bitmap_resized("蔡英文1.png", 35, 35);
	if (!img_ene_bullet)
		game_abort("failed to load image: 蔡英文1.png");

	// Change to first scene.
	game_change_scene(SCENE_MENU);

	FILE *fop;
	fop = fopen("user_data.dat", "r");
	if(fop == NULL){
        skill_point = 3;
        bullet_harm = 0;
        bullet_speed = 0;
        max_health = 0;
        editor_mode = false;
	}
	else{
        if(fscanf(fop, "%d%d%d%d%d", &skill_point, &bullet_harm, &bullet_speed, &max_health, &editor_mode) < 5){
            skill_point = 3;
            bullet_harm = 0;
            bullet_speed = 0;
            max_health = 0;
            editor_mode = false;
        }
        else{
            if(editor_mode){
                for(int i = 0; i < MAX_ENEMY; i++){
                    fscanf(fop, "%1d", &enemies_map[i]);
                }
            }
        }
        fclose(fop);
	}
	level_of_violence = 0;
	plane_color = 1;
	for(int i = 0; i < 4; i ++)
        hover[i] = false;
}

void game_start_event_loop(void) {
	bool done = false;
	ALLEGRO_EVENT event;
	int redraws = 0;
	while (!done) {
		al_wait_for_event(game_event_queue, &event);
		if (event.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			// Event for clicking the window close button.
			game_log("Window close button clicked");
			done = true;
		} else if (event.type == ALLEGRO_EVENT_TIMER) {
			// Event for redrawing the display.
			if (event.timer.source == game_update_timer)
				// The redraw timer has ticked.
				redraws++;
		} else if (event.type == ALLEGRO_EVENT_KEY_DOWN) {
			// Event for keyboard key down.
			//game_log("Key with keycode %d down", event.keyboard.keycode);
			key_state[event.keyboard.keycode] = true;
			on_key_down(event.keyboard.keycode);
		} else if (event.type == ALLEGRO_EVENT_KEY_UP) {
			// Event for keyboard key up.
			//game_log("Key with keycode %d up", event.keyboard.keycode);
			key_state[event.keyboard.keycode] = false;
		} else if (event.type == ALLEGRO_EVENT_MOUSE_BUTTON_DOWN) {
			// Event for mouse key down.
			game_log("Mouse button %d down at (%d, %d)", event.mouse.button, event.mouse.x, event.mouse.y);
			mouse_state[event.mouse.button] = true;
			on_mouse_down(event.mouse.button, event.mouse.x, event.mouse.y);
		} else if (event.type == ALLEGRO_EVENT_MOUSE_BUTTON_UP) {
			// Event for mouse key up.
			game_log("Mouse button %d up at (%d, %d)", event.mouse.button, event.mouse.x, event.mouse.y);
			mouse_state[event.mouse.button] = false;
		} else if (event.type == ALLEGRO_EVENT_MOUSE_AXES) {
			if (event.mouse.dx != 0 || event.mouse.dy != 0) {
				// Event for mouse move.
				//game_log("Mouse move to (%d, %d)", event.mouse.x, event.mouse.y);
				mouse_x = event.mouse.x;
				mouse_y = event.mouse.y;
			} else if (event.mouse.dz != 0) {
				// Event for mouse scroll.
				game_log("Mouse scroll at (%d, %d) with delta %d", event.mouse.x, event.mouse.y, event.mouse.dz);
			}
		}
		// TODO: Process more events and call callbacks by adding more
		// entries inside Scene.

		// Redraw
		if (redraws > 0 && al_is_event_queue_empty(game_event_queue)) {
			//if (redraws > 1)
				//game_log("%d frame(s) dropped", redraws - 1);
			// Update and draw the next frame.
			game_update();
			game_draw();
			redraws = 0;
		}
	}
}

void game_update(void) {
	if (active_scene == SCENE_STAGE_1) {
		plane.vx = plane.vy = 0;
		if (key_state[ALLEGRO_KEY_UP])
			plane.vy -= 1;
		if (key_state[ALLEGRO_KEY_DOWN])
			plane.vy += 1;
		if (key_state[ALLEGRO_KEY_LEFT])
			plane.vx -= 1;
		if (key_state[ALLEGRO_KEY_RIGHT])
			plane.vx += 1;
        if (key_state[ALLEGRO_KEY_A])
			plane.vx -= 5;
        if (key_state[ALLEGRO_KEY_D])
			plane.vx += 5;
        if (key_state[ALLEGRO_KEY_W])
			plane.vy -= 5;
        if (key_state[ALLEGRO_KEY_S])
			plane.vy += 5;
		// 0.71 is (1/sqrt(2)).
		plane.y += plane.vy * 4 * (plane.vx ? 0.71f : 1);
		plane.x += plane.vx * 4 * (plane.vy ? 0.71f : 1);
		// [HACKATHON 1-1]
		/// TODO: Limit the plane's collision box inside the frame.
		///       (x, y axes can be separated.)
		/// Uncomment and fill in the code below.
		if (plane.x-0.5*plane.w < 0)
			plane.x = 0.5*plane.w;
		else if (plane.x+0.5*plane.w > SCREEN_W)
			plane.x = SCREEN_W-0.5*plane.w;
		if (plane.y-0.5*plane.h < 0)
			plane.y = 0.5*plane.h;
		else if (plane.y+0.5*plane.h > SCREEN_H)
			plane.y = SCREEN_H-0.5*plane.h;
		// [HACKATHON 2-6]
		// TODO: Update bullet coordinates.
		// 1) For each bullets, if it's not hidden, update x, y
		// according to vx, vy.
		// 2) If the bullet is out of the screen, hide it.
		// Uncomment and fill in the code below.
		int i, j;
		float gap;
		for (i = 0; i < MAX_BULLET; i++) {
			if (bullets[i].hidden)
				continue;
			if(bullet_harm<10){
                bullets[i].x += bullets[i].vx;
                bullets[i].y += bullets[i].vy;
			}
			else{
                bullets[i].x += (rand()%2)?rand()%100/(-40.0):rand()%100/(40.0);
                bullets[i].y += bullets[i].vy;
			}
			if (bullets[i].y < 0)
				bullets[i].hidden = true;
            for(j = 0; j < MAX_ENEMY; j++){
                if(!enemies[j].hidden){
                    if (pnt_in_rect(bullets[i].x, bullets[i].y, enemies[j].x-0.7*enemies[j].w, enemies[j].y-0.5*enemies[j].h, enemies[j].w*1.7, enemies[j].h)){
                        //game_log("hit enemy");
                        gap = enemies[j].health-bullets[i].health;
                        if(gap > 0){
                            al_play_sample(explo_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &explo_sound_id);
                            enemies[j].health = gap;
                            bullets[i].health = 0;

                        }
                        else{
                            al_play_sample(destru_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &destru_sound_id);
                            enemies[j].health = 0;
                            bullets[i].health = -gap;
                        }
                        //game_log("enemy %d has %d hp, bullet %d has %d hp", j, enemies[j].health, i, bullets[i].health);
                        if(enemies[j].health<=0){
                            enemies[j].hidden = 1;
                            level_of_violence++;
                            if(level_of_violence >= 8){
                                game_change_scene(SCENE_END_VIOLENT);
                                return;
                            }
                        }
                        if(bullets[i].health<=0){
                            //game_log("bullets destroyed");
                            bullets[i].hidden = 1;
                            break;
                        }
                    }
                }
            }
            for(j = 0; j < MAX_BULLET; j++){
                if(ene_bullets[j].hidden) continue;
                if(pnt_in_rect(bullets[i].x, bullets[i].y, ene_bullets[j].x-0.8*ene_bullets[j].w,ene_bullets[j].y-0.5*ene_bullets[j].h, ene_bullets[j].w*3, ene_bullets[j].h)){
                    gap = bullets[i].health - ene_bullets[j].health;
                    if(gap > 0){
                        bullets[i].health = gap;
                        ene_bullets[j].hidden = true;
                    }
                    else{
                        bullets[i].hidden = true;
                        ene_bullets[j].health = -gap;
                        if(gap == 0) ene_bullets[j].hidden = true;
                    }
                    al_play_sample(bomb_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &bomb_sound_id);
                }
            }
		}
		for(i = 0; i < MAX_BULLET; i++) {
            if(ene_bullets[i].hidden) continue;
            if(pnt_in_rect(ene_bullets[i].x, ene_bullets[i].y, plane.x-1.05*plane.w,plane.y-0.5*plane.h, plane.w*1.8, plane.h)){
                plane.health--;
                ene_bullets[i].hidden = true;
                if(plane.health <= 0){
                    al_play_sample(destru_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &destru_sound_id);
                    game_change_scene(SCENE_END_DIE);
                    return;
                }
                al_play_sample(explo2_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &explo2_sound_id);
            }
            ene_bullets[i].x += ene_bullets[i].vx;
            ene_bullets[i].y += ene_bullets[i].vy;
            if(ene_bullets[i].y > SCREEN_H) ene_bullets[i].hidden = true;
		}

		for(i = 0; i < MAX_ENEMY; i++){
            if (enemies[i].hidden)
				continue;
            if (enemies[i].y > SCREEN_H+0.5*enemies[i].h){
                enemies[i].hidden = true;
                continue;
            }
            else if (enemies[i].x*1.02 > SCREEN_W-0.5*enemies[i].w || enemies[i].x < 0.5*enemies[i].w){
            	enemies[i].vx = -enemies[i].vx;
            }

            enemies[i].x += enemies[i].vx;
			enemies[i].y += enemies[i].vy;

			if (pnt_in_rect(enemies[i].x, enemies[i].y, plane.x-0.5*plane.w, plane.y-0.5*plane.h, plane.w, plane.h)){
                gap = plane.health - enemies[i].health;
                if(gap > 0){
                    al_play_sample(explo2_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &explo2_sound_id);
                    plane.health = gap;
                    enemies[i].health = 0;
                    enemies[i].hidden = true;
                }
                else{
                    al_play_sample(destru_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &destru_sound_id);
                    plane.health = 0;
                    enemies[i].health = -gap;
                    plane.hidden = true;
                    if(gap == 0) enemies[i].hidden = true;
                    game_change_scene(SCENE_END_DIE);
                }
            }
		}

		// [HACKATHON 2-7]
		// TODO: Shoot if key is down and cool-down is over.
		// 1) Get the time now using 'al_get_time'.
		// 2) If Space key is down in 'key_state' and the time
		//    between now and last shoot is not less that cool
		//    down time.
		// 3) Loop through the bullet array and find one that is hidden.
		//    (This part can be optimized.)
		// 4) The bullet will be found if your array is large enough.
		// 5) Set the last shoot time to now.
		// 6) Set hidden to false (recycle the bullet) and set its x, y to the
		//    front part of your plane.
		// Uncomment and fill in the code below.
		double now = al_get_time();
		//game_log("key_state[ALLEGRO_KEY_SPACE] is %s", (key_state[ALLEGRO_KEY_SPACE])?"True":"False");
		if (key_state[ALLEGRO_KEY_SPACE] && now - last_shoot_timestamp >= shoot_cooldown) {
			if(bullet_harm < 10){
				for (i = 0; i < MAX_BULLET; i++) {
					if (bullets[i].hidden)
						break;
				}
				if (i != MAX_BULLET){
	                last_shoot_timestamp = now;
	                bullets[i].hidden = false;
	                bullets[i].x = plane.x;
	                bullets[i].y = plane.y-0.5*plane.h;
                    bullets[i].vx = (rand()%2)?rand()%100/(-40.0):rand()%100/(40.0);
	                bullets[i].health = bullets[i].health_max = 1+bullet_harm/5;
				}
			}
			else{
				for (i = 0; i < MAX_BULLET; i++){
					if (bullets[i].hidden) break;
				}
				for (j = i+1; j < MAX_BULLET; j++){
					if (bullets[j].hidden) break;
				}
				if(i != j){
					last_shoot_timestamp = now;
	                bullets[i].hidden = false;
	                bullets[i].x = plane.x-5;
	                bullets[i].vx = (rand()%2)?rand()%100/(-40.0):rand()%100/(40.0);
	                bullets[i].y = plane.y-0.5*plane.h;
	                bullets[i].health = bullets[i].health_max = 4;
				}
			}
		}
		if(!editor_mode && now - last_discharge_timestamp >= discharge_cooldown){
            for(j = 0; j < MAX_ENEMY; j++){
                if(enemies[j].hidden) break;
            }
            if(j!=MAX_ENEMY){
                enemies[j].hidden = false;
                enemies[j].x = (rand()%2)?SCREEN_W/2+rand()%300:SCREEN_W/2-rand()%300;
                enemies[j].y = -(enemies[j].h)/2.0;
                enemies[j].vx = (rand()%2)?rand()%100/(-40.0):rand()%100/(40.0);
                enemies[j].vy = 0.2 * rand() / (RAND_MAX + 1.0) + 0.5;
                enemies[j].health = enemies[j].health_max = 4;
            }
            last_discharge_timestamp = now;
            discharge_cooldown = 2 * rand() / (RAND_MAX + 1.0) + 0.8;
            game_log("next discharge will be %f.1", discharge_cooldown);
		}
		else if (editor_mode){
            bool clear = 1;
            for(i = 0; i < MAX_ENEMY && clear; i++){
                if(!enemies[i].hidden)
                    clear = false;
            }
            if(clear){
                for (i = 0; i < MAX_ENEMY; i++) {
                enemies[i].x = 80*(i%10)+40;
                enemies[i].y = 100*(i/10)+50;
                enemies[i].vy = 0.2;
                enemies[i].health = enemies[i].health_max = 4;
                enemies[i].hidden = !enemies_map[i];
                }
            }
		}
		if(now - last_ene_shoot_timestamp >= MAX_SHOOT_COOLDOWN){
            for(i = 0; i < MAX_ENEMY; i++){
                if(!enemies[i].hidden && rand()%3 == 0){
                    //game_log("enemy %d is going to shoot", i);
                    for(j = 0; j < MAX_BULLET; j++){
                        if(ene_bullets[j].hidden)break;
                    }
                    if(j != MAX_BULLET){
                        ene_bullets[j].hidden = false;
                        ene_bullets[j].x = enemies[i].x;
                        ene_bullets[j].y = enemies[i].y+0.5*enemies[i].h;
                        ene_bullets[j].health = ene_bullets[j].health_max = 1;
                    }
                }
            }
            last_ene_shoot_timestamp = now;
		}
		if(level_of_violence+bullet_harm+bullet_speed < 10) shoot_cooldown = 0.4;
        else if (level_of_violence+bullet_harm+bullet_speed < 15)shoot_cooldown = 0.3;
        else shoot_cooldown = 0.2f;
	}
	else if(active_scene == SCENE_EDITOR){
        int i;
        for(i = 0; i < MAX_ENEMY; i++)
            enemies[i].hidden = !enemies_map[i];

	}
}

void game_draw(void) {
	if (active_scene == SCENE_MENU) {
		al_draw_bitmap(main_img_background, 0, 0, 0);
		al_draw_text(font_rpg_1_90, al_map_rgb(3, 168, 158), SCREEN_W / 2, 30, ALLEGRO_ALIGN_CENTER, "2020 Election");
		if(editor_mode)
            al_draw_text(font_pirulen_24, al_map_rgb(255, 191, 203), 20, SCREEN_H - 85, 0, "EDITOR MODE ON");
		// [HACKATHON 3-5]
		// TODO: Draw settings images.
		// The settings icon should be located at (x, y, w, h) =
		// (SCREEN_W - 48, 10, 38, 38).
		// Change its image according to your mouse position.
		// Uncomment and fill in the code below.level_of_violence+bullet_harm+bullet_speed
		if (pnt_in_rect(mouse_x, mouse_y, SCREEN_W - 48, 10, 38, 38)){
            if(!hover[0]){
                hover[0] = true;
                al_play_sample(hover_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &hover_sound_id);
            }
			al_draw_bitmap(img_market, SCREEN_W - 48, 10, 0);
		}
		else{
            if(hover[0])
                hover[0] = false;
			al_draw_bitmap(img_market2, SCREEN_W - 48, 10, 0);
		}
	} else if (active_scene == SCENE_STAGE_1) {
		int i;
		al_draw_bitmap(start_img_background, 0, 0, 0);
		// [HACKATHON 2-8]
		// TODO: Draw all bullets in your bullet array.
		// Uncomment and fill in the code below.
		for (i = 0; i < MAX_BULLET; i++){
			draw_movable_object(bullets[i]);
			draw_movable_object(ene_bullets[i]);
		}
		draw_movable_object(plane);
		draw_movable_obj_health(plane, 0);
		for (i = 0; i < MAX_ENEMY; i++){
			draw_movable_object(enemies[i]);
			draw_movable_obj_health(enemies[i], 1);
		}
		al_draw_textf(font_rpg_1_64, al_map_rgb(115, 74, 18), SCREEN_W - 20, 20, ALLEGRO_ALIGN_RIGHT, "votes: %d", level_of_violence);
	}
	// [HACKATHON 3-9]
	// TODO: If active_scene is SCENE_SETTINGS.
	// Draw anything you want, or simply clear the display.
	else if (active_scene == SCENE_MARKET) {

		al_draw_bitmap(bm_img_background, 0, 0, 0);
		al_draw_text(font_rpg_1_64, al_map_rgb(0, 255, 127), SCREEN_W / 2, 30, ALLEGRO_ALIGN_CENTER, "Evolve Candidate");
		al_draw_textf(font_pirulen_24, al_map_rgb(250, 235, 215), SCREEN_W / 2, 90, ALLEGRO_ALIGN_CENTER, "Your skill point : %d", skill_point);
		if(plane_color == 1)
            al_draw_bitmap(start_img_plane, SCREEN_W - 160, 60, 0);
        else if(plane_color == 2)
            al_draw_bitmap(start_img_plane2, SCREEN_W - 160, 60, 0);
		if (pnt_in_rect(mouse_x, mouse_y, 175, 150, 450, 100)){
            if(!hover[1]){
                hover[1] = true;
                al_play_sample(hover_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &hover_sound_id);
            }
            al_draw_filled_rounded_rectangle(175, 150, 625, 250, 225, 50, button_light);
            al_draw_textf(font_rpg_1_64, button_dark, SCREEN_W/2, 170, ALLEGRO_ALIGN_CENTER, "bullet speed : %d", bullet_speed);
		}else{
		    if(hover[1])
                hover[1] = false;
            al_draw_filled_rounded_rectangle(175, 150, 625, 250, 250, 50, button_dark);
            al_draw_textf(font_rpg_1_64, button_light, SCREEN_W/2, 170, ALLEGRO_ALIGN_CENTER, "說謊頻率 : %d", bullet_speed);
		}
		if (pnt_in_rect(mouse_x, mouse_y, 175, 280, 450, 100)){
            if(!hover[2]){
                hover[2] = true;
                al_play_sample(hover_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &hover_sound_id);
            }
            al_draw_filled_rounded_rectangle(175, 280, 625, 380, 250, 50, button_light);
            al_draw_textf(font_rpg_1_64, button_dark, SCREEN_W/2, 300, ALLEGRO_ALIGN_CENTER, "bullet harm : %d", bullet_harm);
		}else{
		    if(hover[2])
                hover[2] = false;
            al_draw_filled_rounded_rectangle(175, 280, 625, 380, 250, 50, button_dark);
            al_draw_textf(font_rpg_1_64, button_light, SCREEN_W/2, 300, ALLEGRO_ALIGN_CENTER, "抹黑能力 : %d", bullet_harm);
		}
		if (pnt_in_rect(mouse_x, mouse_y, 175, 410, 450, 100)){
		    if(!hover[3]){
                hover[3] = true;
                al_play_sample(hover_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &hover_sound_id);
            }
            al_draw_filled_rounded_rectangle(175, 410, 625, 510, 250, 50, button_light);
            al_draw_textf(font_rpg_1_64, button_dark, SCREEN_W/2, 430, ALLEGRO_ALIGN_CENTER, "max health : %d", max_health);
		}else{
		    if(hover[3])
                hover[3] = false;
            al_draw_filled_rounded_rectangle(175, 410, 625, 510, 250, 50, button_dark);
            al_draw_textf(font_rpg_1_64, button_light, SCREEN_W/2, 430, ALLEGRO_ALIGN_CENTER, "髮量 : %d", max_health);
		}
		al_draw_text(font_pirulen_24, al_map_rgb(255, 227, 132), SCREEN_W / 2, (SCREEN_H - 200) + 150, ALLEGRO_ALIGN_CENTER, "Press ESC to return");
	}
	else if (active_scene == SCENE_END_DIE) {
        al_clear_to_color(al_map_rgb(0, 0, 0));
        al_draw_bitmap(die_img_background, 0, 0, 0);
        al_draw_text(font_rpg_1_64, al_map_rgb(221, 160, 221), SCREEN_W / 2, (SCREEN_H - 200) - 330, ALLEGRO_ALIGN_CENTER, "Since you are too obscure");
        al_draw_text(font_rpg_1_90, al_map_rgb(255, 0, 0), SCREEN_W / 2, (SCREEN_H - 200) - 220, ALLEGRO_ALIGN_CENTER, "You lose");
        al_draw_text(font_pirulen_24, al_map_rgb(255, 191, 203), SCREEN_W / 2, (SCREEN_H - 200) + 100, ALLEGRO_ALIGN_CENTER, "Your votes will be transferred to s.p.");
        al_draw_text(font_pirulen_24, al_map_rgb(255, 227, 132), SCREEN_W / 2, (SCREEN_H - 200) + 150, ALLEGRO_ALIGN_CENTER, "Press enter to elect again");
	}

	else if (active_scene == SCENE_END_VIOLENT) {
        al_clear_to_color(al_map_rgb(0, 0, 0));
        al_draw_bitmap(win_img_background, 0, 0, 0);
        al_draw_text(font_rpg_1_64, al_map_rgb(221, 160, 221), SCREEN_W / 2, (SCREEN_H - 200) - 330, ALLEGRO_ALIGN_CENTER, "Since you are very famous");
        al_draw_text(font_rpg_1_90, al_map_rgb(255, 0, 0), SCREEN_W / 2, (SCREEN_H - 200) - 220, ALLEGRO_ALIGN_CENTER, "You win");
        al_draw_text(font_pirulen_24, al_map_rgb(255, 191, 203), SCREEN_W / 2, (SCREEN_H - 200) + 100, ALLEGRO_ALIGN_CENTER, "Your votes will be transferred to s.p.");
        al_draw_text(font_pirulen_24, al_map_rgb(255, 227, 132), SCREEN_W / 2, (SCREEN_H - 200) + 150, ALLEGRO_ALIGN_CENTER, "Press enter to re-elect");
	}

	else if (active_scene == SCENE_EDITOR) {
        al_draw_bitmap(start_img_background, 0, 0, 0);
        for(int i = 0; i < 4; i++)
            al_draw_line(0, i*100, SCREEN_W, i*100, al_map_rgb(255, 255, 255), 5);
        for(int i = 0; i < 11; i++)
            al_draw_line(i*80, 0, i*80, 300, al_map_rgb(255, 255, 255), 5);
        for(int i = 0; i < MAX_ENEMY; i++){
            draw_movable_object(enemies[i]);
        }level_of_violence+bullet_harm+bullet_speed;
        al_draw_text(font_pirulen_24, al_map_rgba(255, 255, 255, 0.5), SCREEN_W - 50, SCREEN_H - 50, ALLEGRO_ALIGN_RIGHT, "EDITOR MODE");
        al_draw_text(font_pirulen_24, al_map_rgba(255, 255, 255, 0.7), 20, SCREEN_H - 70, ALLEGRO_ALIGN_LEFT, "S: Save");
        al_draw_text(font_pirulen_24, al_map_rgba(255, 255, 255, 0.7), 20, SCREEN_H - 45, ALLEGRO_ALIGN_LEFT, "ESC: Remove");
	}
	al_flip_display();
}

void game_destroy(void) {
	// Destroy everything you have created.
	// Free the memories allocated by malloc or allegro functions.
	// Destroy shared resources.
	al_destroy_font(font_rpg_1_64);
	al_destroy_font(font_rpg_1_90);
	al_destroy_font(font_pirulen_24);

	/* Menu Scene resources*/
	al_destroy_bitmap(main_img_background);
	al_destroy_sample(die_bgm);
	al_destroy_sample(win_bgm);
	// [HACKATHON 3-6]
	// TODO: Destroy the 2 settings images.
	// Uncomment and fill in the code below.
	al_destroy_bitmap(img_market);
	al_destroy_bitmap(img_market2);

	/* Start Scene resources*/
	al_destroy_bitmap(start_img_background);
	al_destroy_bitmap(start_img_plane);
	al_destroy_bitmap(start_img_plane2);
	al_destroy_bitmap(start_img_enemy);
	al_destroy_bitmap(bm_img_background);
	al_destroy_bitmap(die_img_background);
	al_destroy_bitmap(win_img_background);
	al_destroy_sample(start_bgm);
	al_destroy_sample(bomb_sound);
	al_destroy_sample(explo_sound);
	al_destroy_sample(explo2_sound);
	al_destroy_sample(destru_sound);
	al_destroy_sample(click_sound);
	al_destroy_sample(hover_sound);
	al_destroy_sample(recover_sound);
	// [HACKATHON 2-9]
	// TODO: Destroy your bullet image.
	// Uncomment and fill in the code below.
	al_destroy_bitmap(img_bullet);
	al_destroy_bitmap(img_ene_bullet);

	al_destroy_timer(game_update_timer);
	al_destroy_event_queue(game_event_queue);
	al_destroy_display(game_display);
	free(mouse_state);

}

void game_change_scene(int next_scene) {
	game_log("Change scene from %d to %d", active_scene, next_scene);
	// TODO: Destroy resources initialized when creating scene.
	if (active_scene == SCENE_MENU) {
		al_stop_sample(&main_bgm_id);
		al_stop_sample(&die_bgm_id);
		al_stop_sample(&bm_bgm_id);
		game_log("stop audio (bgm)");
	} else if (active_scene == SCENE_STAGE_1) {
		al_stop_sample(&start_bgm_id);
		game_log("stop audio (bgm)");
	} else if (active_scene == SCENE_END_DIE || active_scene == SCENE_END_VIOLENT) {
		al_stop_sample(&die_bgm_id);
		game_log("stop audio (bgm)");
	} else if (active_scene == SCENE_MARKET) {
        al_stop_sample(&bm_bgm_id);
        game_log("stop audio (bgm)");
	}
	active_scene = next_scene;
	// TODO: Allocate resources before entering scene.
	if (active_scene == SCENE_MENU) {
		if (!al_play_sample(main_bgm, 1.5, 0.0, 1.0, ALLEGRO_PLAYMODE_LOOP, &main_bgm_id))
			game_abort("failed to play audio (bgm)");
	} else if (active_scene == SCENE_STAGE_1) {
	    game_start_timestamp = al_get_time();
	    level_of_violence = 0;
		int i;
		if(plane_color == 1)
            plane.img = start_img_plane;
        else if(plane_color == 2)
            plane.img = start_img_plane2;
		plane.x = 400;
		plane.y = 500;
		plane.w = 50;
		plane.h = 54;
		plane.health = plane.health_max = 5+max_health;
		plane.hidden = false;
		if(!editor_mode){
            for (i = 0; i < MAX_ENEMY; i++) {
                enemies[i].w = 36;
                enemies[i].h = 68;
                enemies[i].vy = 0.5;
                enemies[i].img = start_img_enemy;
                enemies[i].hidden = true;
            }
		}
		else{
            for (i = 0; i < MAX_ENEMY; i++) {
                enemies[i].w = 36;
                enemies[i].h = 68;
                enemies[i].x = 80*(i%10)+40;
                enemies[i].y = 100*(i/10)+50;
                enemies[i].vx = 0;
                enemies[i].vy = 0.2;
                enemies[i].health = enemies[i].health_max = 5;
                enemies[i].hidden = !enemies_map[i];
                enemies[i].img = start_img_enemy;
            }
		}
		// [HACKATHON 2-5-2]
		// TODO: Initialize bullets.
		// For each bullets in array, set their w and h to the size of
		// the image, and set their img to bullet image, hidden to true,
		// (vx, vy) to (0, -3).
		// Uncomment and fill in the code below.
		for (i = 0; i < MAX_BULLET; i++) {
			bullets[i].w = 17;
			bullets[i].h = 34;
			bullets[i].img = img_bullet;
			bullets[i].vx = 0;
			bullets[i].vy = -3-bullet_speed/2.0;
			bullets[i].hidden = true;
		}
		for (i = 0; i < MAX_BULLET; i++){
            ene_bullets[i].w = 17;
			ene_bullets[i].h = 34;
			ene_bullets[i].img = img_ene_bullet;
			ene_bullets[i].vx = 0;
			ene_bullets[i].vy = 3;
			ene_bullets[i].hidden = true;
		}
		if (!al_play_sample(start_bgm, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_LOOP, &start_bgm_id))
			game_abort("failed to play audio (bgm)");
        discharge_cooldown = 0;
        if(level_of_violence+bullet_harm+bullet_speed < 10) shoot_cooldown = 0.4;
        else if (level_of_violence+bullet_harm+bullet_speed < 15)shoot_cooldown = 0.3;
        else shoot_cooldown = 0.2f;
	} else if (active_scene == SCENE_END_DIE){
	    if (!al_play_sample(die_bgm, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_LOOP, &die_bgm_id))
			game_abort("failed to play audio (bgm)");
        skill_point += level_of_violence/2;
	} else if (active_scene == SCENE_END_VIOLENT){
	    if (!al_play_sample(win_bgm, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_LOOP, &die_bgm_id))
			game_abort("failed to play audio (bgm)");
        skill_point += level_of_violence/1;
        level_of_violence = 0;
	} else if (active_scene == SCENE_MARKET){
        if (!al_play_sample(bm_bgm, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_LOOP, &bm_bgm_id))
			game_abort("failed to play audio (bgm)");
	} else if (active_scene == SCENE_EDITOR) {
	    for (int i = 0; i < MAX_ENEMY; i++) {
            enemies[i].x = 80*(i%10)+40;
            enemies[i].y = 100*(i/10)+50;
            enemies[i].w = 36;
            enemies[i].h = 68;
            enemies[i].img = start_img_enemy;
        }
        if(editor_mode == false){
            for (int i = 0; i < MAX_ENEMY; i++)
                enemies_map[i] = false;
        }
	}
}

void on_key_down(int keycode) {
	if (active_scene == SCENE_MENU) {
        //if (keycode == ALLEGRO_KEY_E)
           // game_change_scene(SCENE_EDITOR);
	}
	else if (active_scene == SCENE_MARKET) {
        if (keycode == ALLEGRO_KEY_ESCAPE){
            game_save_data();
            game_change_scene(SCENE_MENU);
        }
        else if (keycode == ALLEGRO_KEY_Q){
            al_play_sample(recover_sound, 1.5, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &recover_sound_id);
            skill_point = bullet_harm+bullet_speed+max_health+skill_point;
            bullet_harm = bullet_speed = max_health = 0;
        }
	}
	else if (active_scene == SCENE_END_DIE || active_scene == SCENE_END_VIOLENT) {
		if (keycode == ALLEGRO_KEY_ENTER)
			game_change_scene(SCENE_MENU);
	}
	/*else if (active_scene == SCENE_EDITOR){
        if (keycode == ALLEGRO_KEY_ESCAPE){
            editor_mode = false;
            game_save_data();
            game_change_scene(SCENE_MENU);
        }
        else if (keycode == ALLEGRO_KEY_M){
            editor_mode = true;
            game_save_data();
            game_change_scene(SCENE_MENU);
        }
	}*/
	else if (active_scene == SCENE_STAGE_1){
        if(keycode == ALLEGRO_KEY_ESCAPE)
            game_change_scene(SCENE_MENU);
	}
}

void on_mouse_down(int btn, int x, int y) {
	// [HACKATHON 3-8]
	// TODO: When settings clicked, switch to settings scene.
	// Uncomment and fill in the code below.
	if (active_scene == SCENE_MENU) {
		if (btn == 1) {
			if (pnt_in_rect(mouse_x, mouse_y, SCREEN_W - 48, 10, 38, 38)){
                al_play_sample(click_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &click_sound_id);
				game_change_scene(SCENE_MARKET);
			}
			else if(pnt_in_rect(mouse_x, mouse_y, 150, 340, 500, 60))
                game_change_scene(SCENE_STAGE_1);
		}
	}
	else if (active_scene == SCENE_MARKET) {
        if (btn == 1){
            if(skill_point){
                if (pnt_in_rect(mouse_x, mouse_y, 200, 150, 400, 100)){
                    skill_point--;
                    bullet_speed++;
                    al_play_sample(click_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &click_sound_id);
                } else if (pnt_in_rect(mouse_x, mouse_y, 200, 280, 400, 100)) {
                    skill_point--;
                    bullet_harm++;
                    al_play_sample(click_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &click_sound_id);
                } else if (pnt_in_rect(mouse_x, mouse_y, 200, 410, 400, 100)) {
                    skill_point--;
                    max_health++;
                    al_play_sample(click_sound, 1, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, &click_sound_id);
                }
            }
            if (pnt_in_rect(mouse_x, mouse_y, SCREEN_W - 160, 60, 50, 54)){
                if(plane_color == 1)
                    plane_color = 2;
                else if(plane_color == 2)
                    plane_color = 1;
            }
        }
	}
	else if (active_scene == SCENE_EDITOR){
        if(btn == 1){
            if(mouse_y < 300){
                enemies_map[(int)mouse_y/100*10+(int)mouse_x/80] = (enemies_map[(int)mouse_y/100*10+(int)mouse_x/80])?false:true;
            }
        }
	}
}

void draw_movable_object(MovableObject obj) {
	if (obj.hidden){
		return;
	}
	al_draw_bitmap(obj.img, round(obj.x - obj.w / 2), round(obj.y - obj.h / 2), 0);
}

void draw_movable_obj_health (MovableObject obj, int pos) {
	if (obj.hidden){
		return;
	}
	if(pos == 0)
        al_draw_line(round(obj.x - obj.health_max*10 / 2), round(obj.y + obj.h / 2), round(obj.x - obj.health_max*10 / 2) + obj.health * 10
              , round(obj.y + obj.h / 2), al_map_rgb(255, 0, 0), 5);
    else if(pos == 1)
        al_draw_line(round(obj.x+7 - obj.health_max*10 / 2), round(obj.y - obj.h / 2), round(obj.x+7 - obj.health_max*10 / 2) + obj.health * 10
              , round(obj.y - obj.h / 2), al_map_rgb(255, 0, 0), 5);
}
ALLEGRO_BITMAP *load_bitmap_resized(const char *filename, int w, int h) {
	ALLEGRO_BITMAP* loaded_bmp = al_load_bitmap(filename);
	if (!loaded_bmp)
		game_abort("failed to load image: %s", filename);
	ALLEGRO_BITMAP *resized_bmp = al_create_bitmap(w, h);
	ALLEGRO_BITMAP *prev_target = al_get_target_bitmap();

	if (!resized_bmp)
		game_abort("failed to create bitmap when creating resized image: %s", filename);
	al_set_target_bitmap(resized_bmp);
	al_draw_scaled_bitmap(loaded_bmp, 0, 0,
		al_get_bitmap_width(loaded_bmp),
		al_get_bitmap_height(loaded_bmp),
		0, 0, w, h, 0);
	al_set_target_bitmap(prev_target);
	al_destroy_bitmap(loaded_bmp);

	game_log("resized image: %s", filename);

	return resized_bmp;
}

// [HACKATHON 3-3]
// TODO: Define bool pnt_in_rect(int px, int py, int x, int y, int w, int h)
// Uncomment and fill in the code below.
bool pnt_in_rect(int px, int py, int x, int y, int w, int h) {
	if((px > x && px < x+w) && (py > y && py < y+h)) return true;
	else return false;
}


// +=================================================================+
// | Code below is for debugging purpose, it's fine to remove it.    |
// | Deleting the code below and removing all calls to the functions |
// | doesn't affect the game.                                        |
// +=================================================================+

void game_abort(const char* format, ...) {
	va_list arg;
	va_start(arg, format);
	game_vlog(format, arg);
	va_end(arg);
	fprintf(stderr, "error occured, exiting after 2 secs");
	// Wait 2 secs before exiting.
	al_rest(2);
	// Force exit program.
	exit(1);
}

void game_log(const char* format, ...) {
#ifdef LOG_ENABLED
	va_list arg;
	va_start(arg, format);
	game_vlog(format, arg);
	va_end(arg);
#endif
}

void game_vlog(const char* format, va_list arg) {
#ifdef LOG_ENABLED
	static bool clear_file = true;
	vprintf(format, arg);
	printf("\n");
	// Write log to file for later debugging.
	FILE* pFile = fopen("log.txt", clear_file ? "w" : "a");
	if (pFile) {
		vfprintf(pFile, format, arg);
		fprintf(pFile, "\n");
		fclose(pFile);
	}
	clear_file = false;
#endif
}

void game_save_data(void){
    FILE *fop;
    fop = fopen("user_data.dat", "w");
    fprintf(fop, "%d %d %d %d %d\n", skill_point, bullet_harm, bullet_speed, max_health, editor_mode);
    if(editor_mode){
        for(int i = 0; i < MAX_ENEMY; i++){
            fprintf(fop, "%d ", enemies_map[i]);
            if(i % 10 == 9) fprintf(fop, "\n");
        }
    }
    fclose(fop);
}
